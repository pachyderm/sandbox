// Code generated by protoc-gen-go.
// source: client/pfs/pfs.proto
// DO NOT EDIT!

/*
Package pfs is a generated protocol buffer package.

It is generated from these files:
	client/pfs/pfs.proto

It has these top-level messages:
	CreateRepoRequest
	InspectRepoRequest
	ListRepoRequest
	DeleteRepoRequest
	StartCommitRequest
	FinishCommitRequest
	InspectCommitRequest
	ListCommitRequest
	ListBranchRequest
	DeleteCommitRequest
	GetFileRequest
	PutFileRequest
	InspectFileRequest
	MakeDirectoryRequest
	ListFileRequest
	DeleteFileRequest
	GetBlockRequest
	DeleteBlockRequest
	InspectBlockRequest
	ListBlockRequest
	InspectDiffRequest
	ListDiffRequest
	DeleteDiffRequest
*/
package pfs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "go.pedge.io/pb/go/google/protobuf"
import google_protobuf2 "go.pedge.io/pb/go/google/protobuf"
import google_protobuf3 "go.pedge.io/pb/go/google/protobuf"
import pfs1 "github.com/pachyderm/pachyderm/src/server/pfs"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type CreateRepoRequest struct {
	Repo    *pfs1.Repo                  `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Created *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
}

func (m *CreateRepoRequest) Reset()                    { *m = CreateRepoRequest{} }
func (m *CreateRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRepoRequest) ProtoMessage()               {}
func (*CreateRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRepoRequest) GetRepo() *pfs1.Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *CreateRepoRequest) GetCreated() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

type InspectRepoRequest struct {
	Repo *pfs1.Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
}

func (m *InspectRepoRequest) Reset()                    { *m = InspectRepoRequest{} }
func (m *InspectRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectRepoRequest) ProtoMessage()               {}
func (*InspectRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InspectRepoRequest) GetRepo() *pfs1.Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type ListRepoRequest struct {
}

func (m *ListRepoRequest) Reset()                    { *m = ListRepoRequest{} }
func (m *ListRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRepoRequest) ProtoMessage()               {}
func (*ListRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DeleteRepoRequest struct {
	Repo *pfs1.Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
}

func (m *DeleteRepoRequest) Reset()                    { *m = DeleteRepoRequest{} }
func (m *DeleteRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRepoRequest) ProtoMessage()               {}
func (*DeleteRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeleteRepoRequest) GetRepo() *pfs1.Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type StartCommitRequest struct {
	Repo     *pfs1.Repo                  `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	ID       string                      `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	ParentID string                      `protobuf:"bytes,3,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	Branch   string                      `protobuf:"bytes,4,opt,name=branch" json:"branch,omitempty"`
	Started  *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=started" json:"started,omitempty"`
}

func (m *StartCommitRequest) Reset()                    { *m = StartCommitRequest{} }
func (m *StartCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*StartCommitRequest) ProtoMessage()               {}
func (*StartCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StartCommitRequest) GetRepo() *pfs1.Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *StartCommitRequest) GetStarted() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

type FinishCommitRequest struct {
	Commit   *pfs1.Commit                `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Finished *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=finished" json:"finished,omitempty"`
}

func (m *FinishCommitRequest) Reset()                    { *m = FinishCommitRequest{} }
func (m *FinishCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*FinishCommitRequest) ProtoMessage()               {}
func (*FinishCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FinishCommitRequest) GetCommit() *pfs1.Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *FinishCommitRequest) GetFinished() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

type InspectCommitRequest struct {
	Commit *pfs1.Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
}

func (m *InspectCommitRequest) Reset()                    { *m = InspectCommitRequest{} }
func (m *InspectCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectCommitRequest) ProtoMessage()               {}
func (*InspectCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InspectCommitRequest) GetCommit() *pfs1.Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type ListCommitRequest struct {
	Repo       []*pfs1.Repo    `protobuf:"bytes,1,rep,name=repo" json:"repo,omitempty"`
	CommitType pfs1.CommitType `protobuf:"varint,2,opt,name=commit_type,json=commitType,enum=pfs.CommitType" json:"commit_type,omitempty"`
	FromCommit []*pfs1.Commit  `protobuf:"bytes,3,rep,name=from_commit,json=fromCommit" json:"from_commit,omitempty"`
	Block      bool            `protobuf:"varint,4,opt,name=block" json:"block,omitempty"`
}

func (m *ListCommitRequest) Reset()                    { *m = ListCommitRequest{} }
func (m *ListCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*ListCommitRequest) ProtoMessage()               {}
func (*ListCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListCommitRequest) GetRepo() []*pfs1.Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *ListCommitRequest) GetFromCommit() []*pfs1.Commit {
	if m != nil {
		return m.FromCommit
	}
	return nil
}

type ListBranchRequest struct {
	Repo *pfs1.Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
}

func (m *ListBranchRequest) Reset()                    { *m = ListBranchRequest{} }
func (m *ListBranchRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBranchRequest) ProtoMessage()               {}
func (*ListBranchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListBranchRequest) GetRepo() *pfs1.Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type DeleteCommitRequest struct {
	Commit *pfs1.Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
}

func (m *DeleteCommitRequest) Reset()                    { *m = DeleteCommitRequest{} }
func (m *DeleteCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCommitRequest) ProtoMessage()               {}
func (*DeleteCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteCommitRequest) GetCommit() *pfs1.Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type GetFileRequest struct {
	File        *pfs1.File   `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	OffsetBytes int64        `protobuf:"varint,2,opt,name=offset_bytes,json=offsetBytes" json:"offset_bytes,omitempty"`
	SizeBytes   int64        `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	Shard       *pfs1.Shard  `protobuf:"bytes,4,opt,name=shard" json:"shard,omitempty"`
	FromCommit  *pfs1.Commit `protobuf:"bytes,5,opt,name=from_commit,json=fromCommit" json:"from_commit,omitempty"`
}

func (m *GetFileRequest) Reset()                    { *m = GetFileRequest{} }
func (m *GetFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFileRequest) ProtoMessage()               {}
func (*GetFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetFileRequest) GetFile() *pfs1.File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *GetFileRequest) GetShard() *pfs1.Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *GetFileRequest) GetFromCommit() *pfs1.Commit {
	if m != nil {
		return m.FromCommit
	}
	return nil
}

type PutFileRequest struct {
	File        *pfs1.File    `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	FileType    pfs1.FileType `protobuf:"varint,2,opt,name=file_type,json=fileType,enum=pfs.FileType" json:"file_type,omitempty"`
	OffsetBytes int64         `protobuf:"varint,3,opt,name=offset_bytes,json=offsetBytes" json:"offset_bytes,omitempty"`
	Value       []byte        `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PutFileRequest) Reset()                    { *m = PutFileRequest{} }
func (m *PutFileRequest) String() string            { return proto.CompactTextString(m) }
func (*PutFileRequest) ProtoMessage()               {}
func (*PutFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PutFileRequest) GetFile() *pfs1.File {
	if m != nil {
		return m.File
	}
	return nil
}

type InspectFileRequest struct {
	File       *pfs1.File   `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Shard      *pfs1.Shard  `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
	FromCommit *pfs1.Commit `protobuf:"bytes,3,opt,name=from_commit,json=fromCommit" json:"from_commit,omitempty"`
}

func (m *InspectFileRequest) Reset()                    { *m = InspectFileRequest{} }
func (m *InspectFileRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectFileRequest) ProtoMessage()               {}
func (*InspectFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *InspectFileRequest) GetFile() *pfs1.File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *InspectFileRequest) GetShard() *pfs1.Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *InspectFileRequest) GetFromCommit() *pfs1.Commit {
	if m != nil {
		return m.FromCommit
	}
	return nil
}

type MakeDirectoryRequest struct {
	File *pfs1.File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *MakeDirectoryRequest) Reset()                    { *m = MakeDirectoryRequest{} }
func (m *MakeDirectoryRequest) String() string            { return proto.CompactTextString(m) }
func (*MakeDirectoryRequest) ProtoMessage()               {}
func (*MakeDirectoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MakeDirectoryRequest) GetFile() *pfs1.File {
	if m != nil {
		return m.File
	}
	return nil
}

type ListFileRequest struct {
	File       *pfs1.File   `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Shard      *pfs1.Shard  `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
	FromCommit *pfs1.Commit `protobuf:"bytes,3,opt,name=from_commit,json=fromCommit" json:"from_commit,omitempty"`
}

func (m *ListFileRequest) Reset()                    { *m = ListFileRequest{} }
func (m *ListFileRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFileRequest) ProtoMessage()               {}
func (*ListFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListFileRequest) GetFile() *pfs1.File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *ListFileRequest) GetShard() *pfs1.Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *ListFileRequest) GetFromCommit() *pfs1.Commit {
	if m != nil {
		return m.FromCommit
	}
	return nil
}

type DeleteFileRequest struct {
	File *pfs1.File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *DeleteFileRequest) Reset()                    { *m = DeleteFileRequest{} }
func (m *DeleteFileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFileRequest) ProtoMessage()               {}
func (*DeleteFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DeleteFileRequest) GetFile() *pfs1.File {
	if m != nil {
		return m.File
	}
	return nil
}

type GetBlockRequest struct {
	Block       *pfs1.Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	OffsetBytes uint64      `protobuf:"varint,2,opt,name=offset_bytes,json=offsetBytes" json:"offset_bytes,omitempty"`
	SizeBytes   uint64      `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *GetBlockRequest) Reset()                    { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()               {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetBlockRequest) GetBlock() *pfs1.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type DeleteBlockRequest struct {
	Block *pfs1.Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *DeleteBlockRequest) Reset()                    { *m = DeleteBlockRequest{} }
func (m *DeleteBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBlockRequest) ProtoMessage()               {}
func (*DeleteBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DeleteBlockRequest) GetBlock() *pfs1.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type InspectBlockRequest struct {
	Block *pfs1.Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *InspectBlockRequest) Reset()                    { *m = InspectBlockRequest{} }
func (m *InspectBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectBlockRequest) ProtoMessage()               {}
func (*InspectBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *InspectBlockRequest) GetBlock() *pfs1.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type ListBlockRequest struct {
}

func (m *ListBlockRequest) Reset()                    { *m = ListBlockRequest{} }
func (m *ListBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBlockRequest) ProtoMessage()               {}
func (*ListBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type InspectDiffRequest struct {
	Diff *pfs1.Diff `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
}

func (m *InspectDiffRequest) Reset()                    { *m = InspectDiffRequest{} }
func (m *InspectDiffRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectDiffRequest) ProtoMessage()               {}
func (*InspectDiffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *InspectDiffRequest) GetDiff() *pfs1.Diff {
	if m != nil {
		return m.Diff
	}
	return nil
}

type ListDiffRequest struct {
	Shard uint64 `protobuf:"varint,1,opt,name=shard" json:"shard,omitempty"`
}

func (m *ListDiffRequest) Reset()                    { *m = ListDiffRequest{} }
func (m *ListDiffRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDiffRequest) ProtoMessage()               {}
func (*ListDiffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type DeleteDiffRequest struct {
	Diff *pfs1.Diff `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
}

func (m *DeleteDiffRequest) Reset()                    { *m = DeleteDiffRequest{} }
func (m *DeleteDiffRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDiffRequest) ProtoMessage()               {}
func (*DeleteDiffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DeleteDiffRequest) GetDiff() *pfs1.Diff {
	if m != nil {
		return m.Diff
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRepoRequest)(nil), "pfs.CreateRepoRequest")
	proto.RegisterType((*InspectRepoRequest)(nil), "pfs.InspectRepoRequest")
	proto.RegisterType((*ListRepoRequest)(nil), "pfs.ListRepoRequest")
	proto.RegisterType((*DeleteRepoRequest)(nil), "pfs.DeleteRepoRequest")
	proto.RegisterType((*StartCommitRequest)(nil), "pfs.StartCommitRequest")
	proto.RegisterType((*FinishCommitRequest)(nil), "pfs.FinishCommitRequest")
	proto.RegisterType((*InspectCommitRequest)(nil), "pfs.InspectCommitRequest")
	proto.RegisterType((*ListCommitRequest)(nil), "pfs.ListCommitRequest")
	proto.RegisterType((*ListBranchRequest)(nil), "pfs.ListBranchRequest")
	proto.RegisterType((*DeleteCommitRequest)(nil), "pfs.DeleteCommitRequest")
	proto.RegisterType((*GetFileRequest)(nil), "pfs.GetFileRequest")
	proto.RegisterType((*PutFileRequest)(nil), "pfs.PutFileRequest")
	proto.RegisterType((*InspectFileRequest)(nil), "pfs.InspectFileRequest")
	proto.RegisterType((*MakeDirectoryRequest)(nil), "pfs.MakeDirectoryRequest")
	proto.RegisterType((*ListFileRequest)(nil), "pfs.ListFileRequest")
	proto.RegisterType((*DeleteFileRequest)(nil), "pfs.DeleteFileRequest")
	proto.RegisterType((*GetBlockRequest)(nil), "pfs.GetBlockRequest")
	proto.RegisterType((*DeleteBlockRequest)(nil), "pfs.DeleteBlockRequest")
	proto.RegisterType((*InspectBlockRequest)(nil), "pfs.InspectBlockRequest")
	proto.RegisterType((*ListBlockRequest)(nil), "pfs.ListBlockRequest")
	proto.RegisterType((*InspectDiffRequest)(nil), "pfs.InspectDiffRequest")
	proto.RegisterType((*ListDiffRequest)(nil), "pfs.ListDiffRequest")
	proto.RegisterType((*DeleteDiffRequest)(nil), "pfs.DeleteDiffRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*pfs1.RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*pfs1.RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*pfs1.Commit, error)
	// FinishCommit turns a write commit into a read commit.
	FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*pfs1.CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*pfs1.CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// ListBranch returns info about the heads of branches.
	ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*pfs1.CommitInfos, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	PutFile(ctx context.Context, opts ...grpc.CallOption) (API_PutFileClient, error)
	// GetFile returns a byte stream of the contents of the file.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (API_GetFileClient, error)
	// InspectFile returns info about a file.
	InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*pfs1.FileInfo, error)
	// ListFile returns info about all files.
	ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*pfs1.FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/CreateRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*pfs1.RepoInfo, error) {
	out := new(pfs1.RepoInfo)
	err := grpc.Invoke(ctx, "/pfs.API/InspectRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*pfs1.RepoInfos, error) {
	out := new(pfs1.RepoInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*pfs1.Commit, error) {
	out := new(pfs1.Commit)
	err := grpc.Invoke(ctx, "/pfs.API/StartCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/FinishCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*pfs1.CommitInfo, error) {
	out := new(pfs1.CommitInfo)
	err := grpc.Invoke(ctx, "/pfs.API/InspectCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*pfs1.CommitInfos, error) {
	out := new(pfs1.CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*pfs1.CommitInfos, error) {
	out := new(pfs1.CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListBranch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PutFile(ctx context.Context, opts ...grpc.CallOption) (API_PutFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/pfs.API/PutFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIPutFileClient{stream}
	return x, nil
}

type API_PutFileClient interface {
	Send(*PutFileRequest) error
	CloseAndRecv() (*google_protobuf1.Empty, error)
	grpc.ClientStream
}

type aPIPutFileClient struct {
	grpc.ClientStream
}

func (x *aPIPutFileClient) Send(m *PutFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIPutFileClient) CloseAndRecv() (*google_protobuf1.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf1.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (API_GetFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[1], c.cc, "/pfs.API/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetFileClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type aPIGetFileClient struct {
	grpc.ClientStream
}

func (x *aPIGetFileClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*pfs1.FileInfo, error) {
	out := new(pfs1.FileInfo)
	err := grpc.Invoke(ctx, "/pfs.API/InspectFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*pfs1.FileInfos, error) {
	out := new(pfs1.FileInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(context.Context, *CreateRepoRequest) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(context.Context, *InspectRepoRequest) (*pfs1.RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(context.Context, *ListRepoRequest) (*pfs1.RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(context.Context, *DeleteRepoRequest) (*google_protobuf1.Empty, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	StartCommit(context.Context, *StartCommitRequest) (*pfs1.Commit, error)
	// FinishCommit turns a write commit into a read commit.
	FinishCommit(context.Context, *FinishCommitRequest) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(context.Context, *InspectCommitRequest) (*pfs1.CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(context.Context, *ListCommitRequest) (*pfs1.CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(context.Context, *DeleteCommitRequest) (*google_protobuf1.Empty, error)
	// ListBranch returns info about the heads of branches.
	ListBranch(context.Context, *ListBranchRequest) (*pfs1.CommitInfos, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	PutFile(API_PutFileServer) error
	// GetFile returns a byte stream of the contents of the file.
	GetFile(*GetFileRequest, API_GetFileServer) error
	// InspectFile returns info about a file.
	InspectFile(context.Context, *InspectFileRequest) (*pfs1.FileInfo, error)
	// ListFile returns info about all files.
	ListFile(context.Context, *ListFileRequest) (*pfs1.FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(context.Context, *DeleteFileRequest) (*google_protobuf1.Empty, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).CreateRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_InspectRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InspectRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).InspectRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ListRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ListRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).DeleteRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_StartCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StartCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).StartCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_FinishCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FinishCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).FinishCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_InspectCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InspectCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).InspectCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ListCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ListCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_DeleteCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).DeleteCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ListBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ListBranch(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).PutFile(&aPIPutFileServer{stream})
}

type API_PutFileServer interface {
	SendAndClose(*google_protobuf1.Empty) error
	Recv() (*PutFileRequest, error)
	grpc.ServerStream
}

type aPIPutFileServer struct {
	grpc.ServerStream
}

func (x *aPIPutFileServer) SendAndClose(m *google_protobuf1.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIPutFileServer) Recv() (*PutFileRequest, error) {
	m := new(PutFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetFile(m, &aPIGetFileServer{stream})
}

type API_GetFileServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type aPIGetFileServer struct {
	grpc.ServerStream
}

func (x *aPIGetFileServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _API_InspectFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InspectFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).InspectFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ListFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ListFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).DeleteFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepo",
			Handler:    _API_CreateRepo_Handler,
		},
		{
			MethodName: "InspectRepo",
			Handler:    _API_InspectRepo_Handler,
		},
		{
			MethodName: "ListRepo",
			Handler:    _API_ListRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _API_DeleteRepo_Handler,
		},
		{
			MethodName: "StartCommit",
			Handler:    _API_StartCommit_Handler,
		},
		{
			MethodName: "FinishCommit",
			Handler:    _API_FinishCommit_Handler,
		},
		{
			MethodName: "InspectCommit",
			Handler:    _API_InspectCommit_Handler,
		},
		{
			MethodName: "ListCommit",
			Handler:    _API_ListCommit_Handler,
		},
		{
			MethodName: "DeleteCommit",
			Handler:    _API_DeleteCommit_Handler,
		},
		{
			MethodName: "ListBranch",
			Handler:    _API_ListBranch_Handler,
		},
		{
			MethodName: "InspectFile",
			Handler:    _API_InspectFile_Handler,
		},
		{
			MethodName: "ListFile",
			Handler:    _API_ListFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _API_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutFile",
			Handler:       _API_PutFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _API_GetFile_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for InternalAPI service

type InternalAPIClient interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*pfs1.RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*pfs1.RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// FinishCommit turns a write commit into a read commit.
	FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*pfs1.CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*pfs1.CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// ListBranch returns info about the heads of branches.
	ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*pfs1.CommitInfos, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	PutFile(ctx context.Context, opts ...grpc.CallOption) (InternalAPI_PutFileClient, error)
	// GetFile returns a byte stream of the contents of the file.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (InternalAPI_GetFileClient, error)
	// InspectFile returns info about a file.
	InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*pfs1.FileInfo, error)
	// ListFile returns info about all files.
	ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*pfs1.FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type internalAPIClient struct {
	cc *grpc.ClientConn
}

func NewInternalAPIClient(cc *grpc.ClientConn) InternalAPIClient {
	return &internalAPIClient{cc}
}

func (c *internalAPIClient) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/CreateRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*pfs1.RepoInfo, error) {
	out := new(pfs1.RepoInfo)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/InspectRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*pfs1.RepoInfos, error) {
	out := new(pfs1.RepoInfos)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/ListRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/DeleteRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/StartCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/FinishCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*pfs1.CommitInfo, error) {
	out := new(pfs1.CommitInfo)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/InspectCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*pfs1.CommitInfos, error) {
	out := new(pfs1.CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/ListCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/DeleteCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*pfs1.CommitInfos, error) {
	out := new(pfs1.CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/ListBranch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) PutFile(ctx context.Context, opts ...grpc.CallOption) (InternalAPI_PutFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InternalAPI_serviceDesc.Streams[0], c.cc, "/pfs.InternalAPI/PutFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalAPIPutFileClient{stream}
	return x, nil
}

type InternalAPI_PutFileClient interface {
	Send(*PutFileRequest) error
	CloseAndRecv() (*google_protobuf1.Empty, error)
	grpc.ClientStream
}

type internalAPIPutFileClient struct {
	grpc.ClientStream
}

func (x *internalAPIPutFileClient) Send(m *PutFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *internalAPIPutFileClient) CloseAndRecv() (*google_protobuf1.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf1.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *internalAPIClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (InternalAPI_GetFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InternalAPI_serviceDesc.Streams[1], c.cc, "/pfs.InternalAPI/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalAPIGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InternalAPI_GetFileClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type internalAPIGetFileClient struct {
	grpc.ClientStream
}

func (x *internalAPIGetFileClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *internalAPIClient) InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*pfs1.FileInfo, error) {
	out := new(pfs1.FileInfo)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/InspectFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*pfs1.FileInfos, error) {
	out := new(pfs1.FileInfos)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/ListFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InternalAPI service

type InternalAPIServer interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(context.Context, *CreateRepoRequest) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(context.Context, *InspectRepoRequest) (*pfs1.RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(context.Context, *ListRepoRequest) (*pfs1.RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(context.Context, *DeleteRepoRequest) (*google_protobuf1.Empty, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	StartCommit(context.Context, *StartCommitRequest) (*google_protobuf1.Empty, error)
	// FinishCommit turns a write commit into a read commit.
	FinishCommit(context.Context, *FinishCommitRequest) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(context.Context, *InspectCommitRequest) (*pfs1.CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(context.Context, *ListCommitRequest) (*pfs1.CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(context.Context, *DeleteCommitRequest) (*google_protobuf1.Empty, error)
	// ListBranch returns info about the heads of branches.
	ListBranch(context.Context, *ListBranchRequest) (*pfs1.CommitInfos, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	PutFile(InternalAPI_PutFileServer) error
	// GetFile returns a byte stream of the contents of the file.
	GetFile(*GetFileRequest, InternalAPI_GetFileServer) error
	// InspectFile returns info about a file.
	InspectFile(context.Context, *InspectFileRequest) (*pfs1.FileInfo, error)
	// ListFile returns info about all files.
	ListFile(context.Context, *ListFileRequest) (*pfs1.FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(context.Context, *DeleteFileRequest) (*google_protobuf1.Empty, error)
}

func RegisterInternalAPIServer(s *grpc.Server, srv InternalAPIServer) {
	s.RegisterService(&_InternalAPI_serviceDesc, srv)
}

func _InternalAPI_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalAPIServer).CreateRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalAPI_InspectRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InspectRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalAPIServer).InspectRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalAPI_ListRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalAPIServer).ListRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalAPI_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalAPIServer).DeleteRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalAPI_StartCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StartCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalAPIServer).StartCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalAPI_FinishCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FinishCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalAPIServer).FinishCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalAPI_InspectCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InspectCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalAPIServer).InspectCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalAPI_ListCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalAPIServer).ListCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalAPI_DeleteCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalAPIServer).DeleteCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalAPI_ListBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalAPIServer).ListBranch(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalAPI_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InternalAPIServer).PutFile(&internalAPIPutFileServer{stream})
}

type InternalAPI_PutFileServer interface {
	SendAndClose(*google_protobuf1.Empty) error
	Recv() (*PutFileRequest, error)
	grpc.ServerStream
}

type internalAPIPutFileServer struct {
	grpc.ServerStream
}

func (x *internalAPIPutFileServer) SendAndClose(m *google_protobuf1.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *internalAPIPutFileServer) Recv() (*PutFileRequest, error) {
	m := new(PutFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _InternalAPI_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalAPIServer).GetFile(m, &internalAPIGetFileServer{stream})
}

type InternalAPI_GetFileServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type internalAPIGetFileServer struct {
	grpc.ServerStream
}

func (x *internalAPIGetFileServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _InternalAPI_InspectFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InspectFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalAPIServer).InspectFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalAPI_ListFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalAPIServer).ListFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalAPI_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalAPIServer).DeleteFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _InternalAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.InternalAPI",
	HandlerType: (*InternalAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepo",
			Handler:    _InternalAPI_CreateRepo_Handler,
		},
		{
			MethodName: "InspectRepo",
			Handler:    _InternalAPI_InspectRepo_Handler,
		},
		{
			MethodName: "ListRepo",
			Handler:    _InternalAPI_ListRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _InternalAPI_DeleteRepo_Handler,
		},
		{
			MethodName: "StartCommit",
			Handler:    _InternalAPI_StartCommit_Handler,
		},
		{
			MethodName: "FinishCommit",
			Handler:    _InternalAPI_FinishCommit_Handler,
		},
		{
			MethodName: "InspectCommit",
			Handler:    _InternalAPI_InspectCommit_Handler,
		},
		{
			MethodName: "ListCommit",
			Handler:    _InternalAPI_ListCommit_Handler,
		},
		{
			MethodName: "DeleteCommit",
			Handler:    _InternalAPI_DeleteCommit_Handler,
		},
		{
			MethodName: "ListBranch",
			Handler:    _InternalAPI_ListBranch_Handler,
		},
		{
			MethodName: "InspectFile",
			Handler:    _InternalAPI_InspectFile_Handler,
		},
		{
			MethodName: "ListFile",
			Handler:    _InternalAPI_ListFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _InternalAPI_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutFile",
			Handler:       _InternalAPI_PutFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _InternalAPI_GetFile_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for BlockAPI service

type BlockAPIClient interface {
	PutBlock(ctx context.Context, opts ...grpc.CallOption) (BlockAPI_PutBlockClient, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (BlockAPI_GetBlockClient, error)
	DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	InspectBlock(ctx context.Context, in *InspectBlockRequest, opts ...grpc.CallOption) (*pfs1.BlockInfo, error)
	ListBlock(ctx context.Context, in *ListBlockRequest, opts ...grpc.CallOption) (*pfs1.BlockInfos, error)
	CreateDiff(ctx context.Context, in *pfs1.DiffInfo, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	InspectDiff(ctx context.Context, in *InspectDiffRequest, opts ...grpc.CallOption) (*pfs1.DiffInfo, error)
	ListDiff(ctx context.Context, in *ListDiffRequest, opts ...grpc.CallOption) (BlockAPI_ListDiffClient, error)
	DeleteDiff(ctx context.Context, in *DeleteDiffRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type blockAPIClient struct {
	cc *grpc.ClientConn
}

func NewBlockAPIClient(cc *grpc.ClientConn) BlockAPIClient {
	return &blockAPIClient{cc}
}

func (c *blockAPIClient) PutBlock(ctx context.Context, opts ...grpc.CallOption) (BlockAPI_PutBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockAPI_serviceDesc.Streams[0], c.cc, "/pfs.BlockAPI/PutBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockAPIPutBlockClient{stream}
	return x, nil
}

type BlockAPI_PutBlockClient interface {
	Send(*google_protobuf3.BytesValue) error
	CloseAndRecv() (*pfs1.BlockRefs, error)
	grpc.ClientStream
}

type blockAPIPutBlockClient struct {
	grpc.ClientStream
}

func (x *blockAPIPutBlockClient) Send(m *google_protobuf3.BytesValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blockAPIPutBlockClient) CloseAndRecv() (*pfs1.BlockRefs, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(pfs1.BlockRefs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockAPIClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (BlockAPI_GetBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockAPI_serviceDesc.Streams[1], c.cc, "/pfs.BlockAPI/GetBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockAPIGetBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockAPI_GetBlockClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type blockAPIGetBlockClient struct {
	grpc.ClientStream
}

func (x *blockAPIGetBlockClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockAPIClient) DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/DeleteBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAPIClient) InspectBlock(ctx context.Context, in *InspectBlockRequest, opts ...grpc.CallOption) (*pfs1.BlockInfo, error) {
	out := new(pfs1.BlockInfo)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/InspectBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAPIClient) ListBlock(ctx context.Context, in *ListBlockRequest, opts ...grpc.CallOption) (*pfs1.BlockInfos, error) {
	out := new(pfs1.BlockInfos)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/ListBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAPIClient) CreateDiff(ctx context.Context, in *pfs1.DiffInfo, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/CreateDiff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAPIClient) InspectDiff(ctx context.Context, in *InspectDiffRequest, opts ...grpc.CallOption) (*pfs1.DiffInfo, error) {
	out := new(pfs1.DiffInfo)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/InspectDiff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAPIClient) ListDiff(ctx context.Context, in *ListDiffRequest, opts ...grpc.CallOption) (BlockAPI_ListDiffClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockAPI_serviceDesc.Streams[2], c.cc, "/pfs.BlockAPI/ListDiff", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockAPIListDiffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockAPI_ListDiffClient interface {
	Recv() (*pfs1.DiffInfo, error)
	grpc.ClientStream
}

type blockAPIListDiffClient struct {
	grpc.ClientStream
}

func (x *blockAPIListDiffClient) Recv() (*pfs1.DiffInfo, error) {
	m := new(pfs1.DiffInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockAPIClient) DeleteDiff(ctx context.Context, in *DeleteDiffRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/DeleteDiff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlockAPI service

type BlockAPIServer interface {
	PutBlock(BlockAPI_PutBlockServer) error
	GetBlock(*GetBlockRequest, BlockAPI_GetBlockServer) error
	DeleteBlock(context.Context, *DeleteBlockRequest) (*google_protobuf1.Empty, error)
	InspectBlock(context.Context, *InspectBlockRequest) (*pfs1.BlockInfo, error)
	ListBlock(context.Context, *ListBlockRequest) (*pfs1.BlockInfos, error)
	CreateDiff(context.Context, *pfs1.DiffInfo) (*google_protobuf1.Empty, error)
	InspectDiff(context.Context, *InspectDiffRequest) (*pfs1.DiffInfo, error)
	ListDiff(*ListDiffRequest, BlockAPI_ListDiffServer) error
	DeleteDiff(context.Context, *DeleteDiffRequest) (*google_protobuf1.Empty, error)
}

func RegisterBlockAPIServer(s *grpc.Server, srv BlockAPIServer) {
	s.RegisterService(&_BlockAPI_serviceDesc, srv)
}

func _BlockAPI_PutBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlockAPIServer).PutBlock(&blockAPIPutBlockServer{stream})
}

type BlockAPI_PutBlockServer interface {
	SendAndClose(*pfs1.BlockRefs) error
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ServerStream
}

type blockAPIPutBlockServer struct {
	grpc.ServerStream
}

func (x *blockAPIPutBlockServer) SendAndClose(m *pfs1.BlockRefs) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blockAPIPutBlockServer) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BlockAPI_GetBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockAPIServer).GetBlock(m, &blockAPIGetBlockServer{stream})
}

type BlockAPI_GetBlockServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type blockAPIGetBlockServer struct {
	grpc.ServerStream
}

func (x *blockAPIGetBlockServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockAPI_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BlockAPIServer).DeleteBlock(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BlockAPI_InspectBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InspectBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BlockAPIServer).InspectBlock(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BlockAPI_ListBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BlockAPIServer).ListBlock(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BlockAPI_CreateDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pfs1.DiffInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BlockAPIServer).CreateDiff(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BlockAPI_InspectDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InspectDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BlockAPIServer).InspectDiff(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BlockAPI_ListDiff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDiffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockAPIServer).ListDiff(m, &blockAPIListDiffServer{stream})
}

type BlockAPI_ListDiffServer interface {
	Send(*pfs1.DiffInfo) error
	grpc.ServerStream
}

type blockAPIListDiffServer struct {
	grpc.ServerStream
}

func (x *blockAPIListDiffServer) Send(m *pfs1.DiffInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockAPI_DeleteDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BlockAPIServer).DeleteDiff(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BlockAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.BlockAPI",
	HandlerType: (*BlockAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteBlock",
			Handler:    _BlockAPI_DeleteBlock_Handler,
		},
		{
			MethodName: "InspectBlock",
			Handler:    _BlockAPI_InspectBlock_Handler,
		},
		{
			MethodName: "ListBlock",
			Handler:    _BlockAPI_ListBlock_Handler,
		},
		{
			MethodName: "CreateDiff",
			Handler:    _BlockAPI_CreateDiff_Handler,
		},
		{
			MethodName: "InspectDiff",
			Handler:    _BlockAPI_InspectDiff_Handler,
		},
		{
			MethodName: "DeleteDiff",
			Handler:    _BlockAPI_DeleteDiff_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutBlock",
			Handler:       _BlockAPI_PutBlock_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetBlock",
			Handler:       _BlockAPI_GetBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDiff",
			Handler:       _BlockAPI_ListDiff_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 1077 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x5f, 0xd7, 0x69, 0x93, 0xbc, 0xb4, 0xe9, 0x76, 0x1a, 0x4a, 0x71, 0xf9, 0x53, 0xcc, 0x81,
	0x15, 0x42, 0xe9, 0x2a, 0xa5, 0xbb, 0xa8, 0x2b, 0xfe, 0x6c, 0xb7, 0x2c, 0xaa, 0x04, 0xd2, 0xca,
	0xbb, 0xe2, 0x5a, 0x39, 0xe9, 0x78, 0x6b, 0x6d, 0x62, 0x1b, 0x7b, 0xb2, 0xa8, 0x9c, 0x90, 0xb8,
	0x73, 0xe2, 0x0b, 0x20, 0x71, 0xe0, 0xc4, 0x77, 0xe0, 0x9b, 0x31, 0xf3, 0x66, 0xec, 0xcc, 0xc4,
	0xa9, 0xeb, 0x20, 0x21, 0x0e, 0xf4, 0x10, 0xc5, 0x33, 0xef, 0xfd, 0xe6, 0xfd, 0xde, 0x9b, 0x37,
	0xf3, 0x1b, 0xe8, 0x8d, 0xc6, 0x21, 0x8d, 0xd8, 0x41, 0x12, 0x64, 0xe2, 0xd7, 0x4f, 0xd2, 0x98,
	0xc5, 0xc4, 0xe6, 0x9f, 0xce, 0xdb, 0x2f, 0xe3, 0xf8, 0xe5, 0x98, 0x1e, 0xf8, 0x49, 0x78, 0xe0,
	0x47, 0x51, 0xcc, 0x7c, 0x16, 0xc6, 0x91, 0x72, 0x71, 0xf6, 0x94, 0x15, 0x47, 0xc3, 0x69, 0x70,
	0x40, 0x27, 0x09, 0xbb, 0x52, 0xc6, 0xf7, 0xe6, 0x8d, 0x2c, 0x9c, 0xd0, 0x8c, 0xf9, 0x93, 0x44,
	0x39, 0xbc, 0x3b, 0xef, 0xf0, 0x43, 0xea, 0x27, 0x09, 0x4d, 0xf3, 0xd5, 0x7b, 0x19, 0x4d, 0x5f,
	0xd3, 0xd4, 0xa4, 0xe5, 0x5e, 0xc2, 0xd6, 0x93, 0x94, 0xfa, 0x8c, 0x7a, 0x34, 0x89, 0x3d, 0xfa,
	0xfd, 0x94, 0xaf, 0x49, 0xde, 0x81, 0x46, 0xca, 0x87, 0xbb, 0xd6, 0xbe, 0x75, 0xaf, 0x33, 0x68,
	0xf7, 0x85, 0x3b, 0xda, 0x71, 0x9a, 0x7c, 0x02, 0xcd, 0x11, 0x62, 0x2e, 0x76, 0x57, 0xd0, 0xc3,
	0xe9, 0xcb, 0xd8, 0xfd, 0x3c, 0x76, 0xff, 0x45, 0x4e, 0xce, 0xcb, 0x5d, 0xdd, 0x43, 0x20, 0x67,
	0x51, 0x96, 0xd0, 0x11, 0xab, 0x1f, 0xca, 0xdd, 0x82, 0xcd, 0x6f, 0xc2, 0x4c, 0x47, 0xb8, 0x03,
	0xd8, 0x3a, 0xa5, 0x63, 0xba, 0x0c, 0x63, 0xf7, 0x4f, 0x0b, 0xc8, 0x73, 0xe6, 0xa7, 0xec, 0x49,
	0x3c, 0x99, 0x84, 0xac, 0x66, 0x9e, 0x5d, 0x58, 0x09, 0x65, 0x8a, 0x6d, 0x8f, 0x7f, 0x91, 0x3d,
	0x68, 0x27, 0x7e, 0xca, 0xb7, 0xf6, 0x9c, 0x4f, 0xdb, 0x38, 0xdd, 0x92, 0x13, 0x67, 0x17, 0x64,
	0x07, 0xd6, 0x86, 0xa9, 0x1f, 0x8d, 0x2e, 0x77, 0x1b, 0x68, 0x51, 0x23, 0x51, 0xac, 0x4c, 0x44,
	0xe6, 0xc5, 0x5a, 0xbd, 0xb9, 0x58, 0xca, 0xd5, 0x4d, 0x61, 0xfb, 0x69, 0x18, 0x85, 0xd9, 0xa5,
	0x49, 0xf8, 0x03, 0x58, 0x1b, 0xe1, 0x84, 0xa2, 0xdc, 0x41, 0xca, 0xca, 0x47, 0x99, 0xc8, 0x03,
	0x68, 0x05, 0x88, 0xa5, 0x92, 0x65, 0x75, 0xc8, 0xc2, 0xd7, 0x7d, 0x04, 0x3d, 0xb5, 0x41, 0xcb,
	0x07, 0x75, 0xff, 0xb0, 0x60, 0x4b, 0xec, 0xd4, 0x75, 0x05, 0xb6, 0x17, 0x15, 0xf8, 0x3e, 0x74,
	0x24, 0xfc, 0x9c, 0x5d, 0x25, 0x14, 0x2b, 0xdd, 0x1d, 0x6c, 0x6a, 0xcb, 0xbf, 0xe0, 0xd3, 0x1e,
	0x8c, 0x8a, 0x6f, 0xf2, 0x31, 0x74, 0x82, 0x34, 0x9e, 0x9c, 0x2b, 0x42, 0x36, 0xae, 0x6b, 0x10,
	0x02, 0x61, 0x97, 0xdf, 0xa4, 0x07, 0xab, 0xc3, 0x71, 0x3c, 0x7a, 0x85, 0x5b, 0xd2, 0xf2, 0xe4,
	0x40, 0x34, 0x90, 0x60, 0x7a, 0x82, 0xfb, 0x53, 0xb3, 0x81, 0x8e, 0x61, 0x5b, 0x36, 0xdd, 0x3f,
	0x28, 0xcd, 0x5f, 0x16, 0x74, 0xbf, 0xa6, 0xec, 0x69, 0x38, 0xa6, 0x5a, 0xb4, 0x80, 0x0f, 0x8d,
	0x68, 0x68, 0xc7, 0x69, 0xf2, 0x3e, 0xac, 0xc7, 0x41, 0x90, 0x51, 0x76, 0x3e, 0xbc, 0x62, 0x34,
	0xc3, 0xc2, 0xd8, 0x5e, 0x47, 0xce, 0x9d, 0x88, 0x29, 0xbe, 0x02, 0x64, 0xe1, 0x8f, 0x54, 0x39,
	0xd8, 0xe8, 0xd0, 0x16, 0x33, 0xd2, 0xbc, 0x0f, 0xab, 0xd9, 0xa5, 0x9f, 0x5e, 0x60, 0xe6, 0x9d,
	0x01, 0x60, 0x84, 0xe7, 0x62, 0xc6, 0x93, 0x86, 0xf9, 0x4a, 0xae, 0x96, 0xf9, 0x6b, 0x95, 0x74,
	0x7f, 0xe5, 0x39, 0x3c, 0x9b, 0x2e, 0x93, 0xc3, 0x47, 0xd0, 0x16, 0xff, 0xfa, 0xce, 0x6e, 0x14,
	0x3e, 0xb8, 0xaf, 0xad, 0x40, 0x7d, 0x95, 0xf2, 0xb5, 0xcb, 0xf9, 0xf2, 0xad, 0x7c, 0xed, 0x8f,
	0xa7, 0x14, 0x13, 0x5a, 0xf7, 0xe4, 0xc0, 0xfd, 0xd9, 0x2a, 0x2e, 0x95, 0x25, 0xa8, 0x15, 0xc5,
	0x59, 0xa9, 0x59, 0x1c, 0xbb, 0xba, 0x38, 0x47, 0xd0, 0xfb, 0xd6, 0x7f, 0x45, 0x4f, 0xc3, 0x94,
	0xf3, 0x88, 0xd3, 0xab, 0x7a, 0x34, 0xdc, 0x9f, 0x2c, 0x79, 0xb9, 0xfd, 0x87, 0xcc, 0x8b, 0xbb,
	0xb4, 0x3e, 0x07, 0x77, 0x0a, 0x9b, 0xbc, 0x9b, 0x4f, 0xc4, 0x51, 0xca, 0x11, 0xfb, 0xf9, 0x39,
	0xb3, 0x34, 0x5a, 0xd2, 0x43, 0x1a, 0x16, 0x76, 0x74, 0xe3, 0xa6, 0x8e, 0x6e, 0x68, 0x1d, 0xed,
	0x3e, 0x00, 0x22, 0xa9, 0x2e, 0x17, 0xd9, 0x7d, 0x08, 0xdb, 0xaa, 0x43, 0x96, 0x04, 0x12, 0xb8,
	0x8b, 0xd7, 0x84, 0x86, 0xd2, 0x34, 0xec, 0x34, 0x0c, 0x02, 0xad, 0x60, 0x17, 0x7c, 0x68, 0x14,
	0x0c, 0xed, 0x38, 0xed, 0x7e, 0x28, 0xb7, 0x59, 0x47, 0xf4, 0xf2, 0x7d, 0xb4, 0x30, 0x4d, 0x39,
	0x98, 0xed, 0x46, 0xfd, 0xc5, 0x07, 0xbf, 0x34, 0xc1, 0x7e, 0xfc, 0xec, 0x8c, 0x7c, 0x0e, 0x30,
	0xd3, 0x71, 0xb2, 0x23, 0x37, 0x7c, 0x5e, 0xd8, 0x9d, 0x9d, 0x92, 0x10, 0x7c, 0x25, 0x9e, 0x18,
	0xee, 0x1d, 0xf2, 0x10, 0x3a, 0x9a, 0x3a, 0x93, 0x37, 0x71, 0x81, 0xb2, 0x5e, 0x3b, 0x1b, 0xc5,
	0xcd, 0x78, 0x16, 0x05, 0x31, 0x07, 0x0e, 0xa0, 0x95, 0x2b, 0x34, 0xe9, 0xa1, 0x71, 0x4e, 0xb0,
	0x9d, 0xae, 0x01, 0xc9, 0x38, 0x86, 0x93, 0x9d, 0x49, 0xb8, 0x22, 0x5b, 0xd2, 0xf4, 0x0a, 0xb2,
	0x47, 0xd0, 0xd1, 0xd4, 0x5c, 0x91, 0x2d, 0xeb, 0xbb, 0xa3, 0xf7, 0x3d, 0x87, 0x9d, 0xc0, 0xba,
	0x2e, 0xaa, 0x64, 0x57, 0xb5, 0x76, 0x49, 0x67, 0x2b, 0x42, 0x7f, 0x06, 0x1b, 0x86, 0x48, 0x92,
	0xb7, 0xf4, 0x4a, 0x99, 0xab, 0xe8, 0x4a, 0xa6, 0xaa, 0xf5, 0x29, 0xc0, 0x4c, 0x25, 0x55, 0xe6,
	0x25, 0xd9, 0x74, 0xee, 0xce, 0x01, 0x33, 0x49, 0x5e, 0x57, 0x20, 0x45, 0x7e, 0x81, 0x28, 0x55,
	0x90, 0x57, 0xd1, 0xa5, 0xf2, 0x69, 0xd1, 0x0d, 0x29, 0x5c, 0x18, 0xfd, 0x18, 0x9a, 0xea, 0xfa,
	0x27, 0xdb, 0x68, 0x36, 0xc5, 0xe0, 0xfa, 0x98, 0xf7, 0x2c, 0xf2, 0x05, 0x34, 0x95, 0xfc, 0x29,
	0xac, 0x29, 0x86, 0xce, 0x5e, 0x09, 0x8b, 0x27, 0xfe, 0x3b, 0xbc, 0xe1, 0xef, 0xdc, 0xb7, 0xb4,
	0xde, 0xc4, 0x45, 0x8c, 0xde, 0xd4, 0x17, 0x9a, 0xe9, 0x8b, 0xd9, 0x9b, 0x88, 0x9a, 0xf5, 0xa6,
	0x0e, 0xe9, 0x1a, 0x10, 0xa3, 0x37, 0x11, 0xa5, 0xf7, 0x66, 0xad, 0x7c, 0x07, 0xbf, 0x35, 0x05,
	0x5b, 0x46, 0xd3, 0xc8, 0x1f, 0xff, 0xef, 0x0e, 0xe6, 0x97, 0x35, 0x0f, 0xe6, 0xf5, 0x2b, 0xdc,
	0x9e, 0xd1, 0xdb, 0x33, 0xfa, 0xaf, 0x9f, 0xd1, 0xdf, 0x1b, 0xd0, 0x42, 0x5d, 0x17, 0x07, 0xf4,
	0x11, 0xb4, 0x78, 0xa1, 0x70, 0x48, 0xaa, 0xd2, 0x54, 0x3c, 0xd4, 0x7b, 0x20, 0xc8, 0xb0, 0x6e,
	0x8f, 0xa1, 0x95, 0x3f, 0x86, 0x14, 0xfb, 0xb9, 0xb7, 0xd1, 0xcd, 0x95, 0xe3, 0x67, 0x46, 0x7b,
	0xd8, 0xa8, 0xca, 0x95, 0x9f, 0x3a, 0x15, 0x2d, 0x73, 0x0c, 0xeb, 0xfa, 0x13, 0x47, 0xb5, 0xdd,
	0x82, 0x57, 0x8f, 0x9e, 0x82, 0x2a, 0xff, 0x11, 0xb4, 0x8b, 0x57, 0x0e, 0x79, 0x63, 0xd6, 0x6d,
	0x3a, 0x6a, 0xd3, 0x44, 0x65, 0x08, 0x53, 0xb7, 0x9a, 0x78, 0x8a, 0x90, 0x8d, 0xe2, 0x55, 0x22,
	0xec, 0xb5, 0x2e, 0x33, 0xc4, 0x19, 0x5d, 0xa2, 0x3d, 0x7a, 0x1c, 0x73, 0x41, 0x0e, 0x3c, 0x94,
	0x5d, 0x82, 0xa8, 0x59, 0x97, 0x54, 0x41, 0x78, 0x65, 0x8b, 0x36, 0x41, 0x98, 0xde, 0x26, 0x3a,
	0xf0, 0x5a, 0xb6, 0xc3, 0x35, 0x9c, 0x39, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x10, 0x32, 0xde,
	0x8f, 0xd1, 0x11, 0x00, 0x00,
}
