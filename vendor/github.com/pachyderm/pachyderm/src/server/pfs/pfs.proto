syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "server/pkg/shard/shard.proto";

package pfs;

message Repo {
  string name = 1;
}

message Commit {
  Repo repo = 1;
  string id = 2;
}

message File {
  Commit commit = 1;
  string path = 2;
}

message Block {
  string hash = 1;
}

message Diff {
  Commit commit = 1;
  uint64 shard = 2;
}

message RepoInfo {
  Repo repo = 1;
  google.protobuf.Timestamp created = 2;
  uint64 size_bytes = 3;
}

message RepoInfos {
  repeated RepoInfo repo_info = 1;
}

enum CommitType {
  COMMIT_TYPE_NONE = 0;
  COMMIT_TYPE_READ = 1;
  COMMIT_TYPE_WRITE = 2;
}


message CommitInfo {
  Commit commit = 1;
  string branch = 2;
  CommitType commit_type = 3;
  Commit parent_commit = 4;
  google.protobuf.Timestamp started = 5;
  google.protobuf.Timestamp finished = 6;
  uint64 size_bytes = 7;
}

message CommitInfos {
  repeated CommitInfo commit_info = 1;
}

enum FileType {
  FILE_TYPE_NONE = 0;
  FILE_TYPE_REGULAR = 1;
  FILE_TYPE_DIR = 2;
}

message FileInfo {
  File file = 1;
  FileType file_type = 2;
  uint64 size_bytes = 3;
  uint32 perm = 4;
  google.protobuf.Timestamp modified = 5;
  Commit commit_modified = 6;
  repeated File children = 7;
}

message FileInfos {
  repeated FileInfo file_info = 1;
}

message ByteRange {
  uint64 lower = 1;
  uint64 upper = 2;
}

message BlockRef {
  Block block = 1;
  ByteRange range = 2;
}

message BlockRefs {
  repeated BlockRef block_ref = 1;
}

message Append {
  repeated BlockRef block_refs = 1;
  map<string, bool> children = 2;
  Commit last_ref = 3;
}

message BlockInfo {
  Block block = 1;
  google.protobuf.Timestamp created = 2;
  uint64 size_bytes = 3;
}

message BlockInfos {
  repeated BlockInfo block_info = 1;
}

message DiffInfo {
  Diff diff = 1;
  Commit parent_commit = 2;
  string branch = 3;
  google.protobuf.Timestamp started = 4;
  google.protobuf.Timestamp finished = 5;
  // Appends is the BlockRefs which have been append to files indexed by path.
  map<string, Append> appends = 6;
  uint64 size_bytes = 7;
}

message Shard {
  uint64 file_number = 1;
  uint64 file_modulus = 2;
  uint64 block_number = 3;
  uint64 block_modulus = 4;
}

